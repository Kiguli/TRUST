import pytest
from faker import Faker
from flask import Flask
from flask.testing import FlaskCliRunner, FlaskClient
from flask_inertia.unittest import InertiaTestResponse

from app import create_app

fake = Faker()


@pytest.fixture
def app() -> Flask:
    """Create a new Flask app instance for testing"""
    app = create_app()
    app.config.update({
        'TESTING': True,
        'SERVER_NAME': 'localhost',
    })
    app.debug = True
    app.response_class = InertiaTestResponse

    with app.app_context():
        yield app


@pytest.fixture
def client(app) -> FlaskClient:
    """Create a test client for the Flask app"""
    yield app.test_client()


@pytest.fixture
def runner(app) -> FlaskCliRunner:
    """Create a test CLI runner for the Flask app"""
    return app.test_cli_runner()


@pytest.fixture
def sample_data():
    return fake_data()


def fake_data():
    return {
        'model': fake.random_element(['Linear', 'Polynomial']),
        'timing': fake.random_element(['Discrete-Time', 'Continuous-Time']),
        'mode': fake.random_element(['Stability', 'Safety Barrier', 'Reachability Barrier', 'Reach and Avoid Barrier']),
        'X0': [
            [0., -0.0165956, -0.10041777, -0.07025183, -0.06192259, -0.0203306, -0.01623254, -0.05947796, -0.09527709, -0.01687403, -0.07203046, 0.0607544, -0.03824448, 0.07488711, -0.08377655, -0.06511951, -0.08107854, 0.0917422, 0.0383172, 0.03765998, -0.09701543, 0.09726816, -0.04439783, -0.07994308, 0.08182775, -0.04202417, -0.09539485, -0.05802785, -0.00120692, 0.0157226],
            [0., 0.0440649, -0.03969944, -0.08253646, -0.03159037, 0.00714412, 0.03684059, 0.07546116, 0.03349872, 0.01078519, -0.06054844, 0.09293201, 0.03907207, 0.07853889, -0.09144017, 0.07479074, -0.01642967, 0.00582227, -0.03597945, 0.06730831, 0.05040546, 0.04866298, 0.05882855, -0.01086527, -0.0420766, -0.07317601, 0.03534686, -0.04784462, -0.08990777, -0.07066635]
        ],
        'U0': [
            [-0.0165956, -0.09997713, -0.07064882, -0.06274796, -0.02064651, -0.0161611, -0.05910955, -0.09452248, -0.01653904, -0.07192261, 0.06014891, -0.03731516, 0.07527783, -0.08299116, -0.06603392, -0.08033063, 0.09157791, 0.03837542, 0.03730019, -0.09634234, 0.09777222, -0.0439112, -0.0793548, 0.0817191, -0.04244493, -0.09612661, -0.05767438, -0.00168537, 0.01482352, 0.01786111],
            [ 0.0440649, -0.03953349, -0.08153228, -0.03088785, 0.00776335, 0.0370439, 0.07562349, 0.0340935, 0.01173797, -0.0603797, 0.09365232, 0.03846452, 0.07892133, -0.09218904, 0.0756285, -0.01577847, 0.00663306, -0.03689687, 0.06692513, 0.05002886, 0.04963313, 0.05785587, -0.01042129, -0.04127717, -0.07399429, 0.03576711, -0.04689067, -0.08932749, -0.07065429, 0.03995167]
        ],
        'X1': [
            [-0.0165956, -0.10041777, -0.07025183, -0.06192259, -0.0203306, -0.01623254, -0.05947796, -0.09527709, -0.01687403, -0.07203046, 0.0607544, -0.03824448, 0.07488711, -0.08377655, -0.06511951, -0.08107854, 0.0917422, 0.0383172, 0.03765998, -0.09701543, 0.09726816, -0.04439783, -0.07994308, 0.08182775, -0.04202417, -0.09539485, -0.05802785, -0.00120692, 0.0157226, 0.01856777],
            [ 0.0440649, -0.03969944, -0.08253646, -0.03159037, 0.00714412, 0.03684059, 0.07546116, 0.03349872, 0.01078519, -0.06054844, 0.09293201, 0.03907207, 0.07853889, -0.09144017, 0.07479074, -0.01642967, 0.00582227, -0.03597945, 0.06730831, 0.05040546, 0.04866298, 0.05882855, -0.01086527, -0.0420766, -0.07317601, 0.03534686, -0.04784462, -0.08990777, -0.07066635, 0.0401089]
        ],
        'stateSpace': {
            'x1': [0.1, 0.5],
            'x2': [0.1, 1.0],
        },
        'initialState': {
            'x1': [0.1, 0.4],
            'x2': [0.1, 0.55],
        },
        'unsafeStates': [
            {
                'x1': [0.45, 0.5],
                'x2': [0.6, 1.0],
            },
        ]
    }
